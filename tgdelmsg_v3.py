"""
Telegram Message Deleter Script
¬© 2025

–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–∞–∫ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏, —Ç–∞–∫ –∏ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –ø–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Telethon (pip install telethon)
- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram API (https://my.telegram.org)

–ê–≤—Ç–æ—Ä: [–í–∞—à–µ –ò–º—è]
"""

import asyncio
import logging
import re
from telethon import TelegramClient, errors
from telethon.errors import SessionPasswordNeededError

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
API_ID = 123456  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API ID
API_HASH = 'your_api_hash'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API Hash
PHONE_NUMBER = '+1234567890'  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
SESSION_NAME = 'my_session'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
MESSAGES_FILE = 'messages.txt'  # –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫
PAUSE_BETWEEN_DELETIONS = 0.2  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = 'delete_messages.log'
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler(LOG_FILE, encoding='utf-8'), logging.StreamHandler()]
)


async def authenticate(client):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–∑ SMS/Telegram –∏–ª–∏ 2FA-–ø–∞—Ä–æ–ª—å.
    """
    await client.connect()

    if not await client.is_user_authorized():
        logging.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—Ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        await client.send_code_request(PHONE_NUMBER)

        code = input("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS/Telegram: ")
        try:
            await client.sign_in(PHONE_NUMBER, code)
        except SessionPasswordNeededError:
            password = input("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            await client.sign_in(password=password)


async def delete_messages():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π,
    –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑–æ–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
    """
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

    await authenticate(client)

    try:
        with open(MESSAGES_FILE, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        for line in lines:
            line = line.strip()
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.search(r't\.me/(c/)?([\w\d_]+)/(\d+)', line)
            if match:
                is_private = match.group(1) == "c/"
                chat_identifier = match.group(2)
                message_id = int(match.group(3))

                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
                    if is_private:
                        chat_id = -1000000000000 + int(chat_identifier)
                    else:
                        chat_id = await client.get_peer_id(chat_identifier)

                    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await client.delete_messages(chat_id, message_id)
                    logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(PAUSE_BETWEEN_DELETIONS)

                except errors.MessageIdInvalidError:
                    logging.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                except errors.ChatAdminRequiredError:
                    logging.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}.")
                except errors.FloodWaitError as e:
                    logging.error(f"‚è≥ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(e.seconds)
                except errors.UserIsBlockedError:
                    logging.error("üö´ Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞.")
                    break
                except errors.PhoneNumberBannedError:
                    logging.critical("üö® –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram!")
                    break
                except Exception as e:
                    logging.exception(f"‚ùó –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            else:
                logging.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏: {line}")

    finally:
        await client.disconnect()
        logging.info("üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram")


if __name__ == "__main__":
    asyncio.run(delete_messages())
