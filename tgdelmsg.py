import asyncio
import logging
import re
from telethon import TelegramClient, errors
from telethon.errors import SessionPasswordNeededError

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
API_ID = 123456  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API ID
API_HASH = 'your_api_hash'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π API Hash
PHONE_NUMBER = '+1234567890'  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
SESSION_NAME = 'my_session'  # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
MESSAGES_FILE = 'messages.txt'  # –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = 'delete_messages.log'
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler(LOG_FILE, encoding='utf-8'), logging.StreamHandler()]
)

async def authenticate(client):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
    await client.connect()

    if not await client.is_user_authorized():
        logging.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—Ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        await client.send_code_request(PHONE_NUMBER)

        code = input("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS/Telegram: ")
        try:
            await client.sign_in(PHONE_NUMBER, code)
        except SessionPasswordNeededError:
            password = input("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
            await client.sign_in(password=password)

async def delete_messages():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

    await authenticate(client)

    try:
        with open(MESSAGES_FILE, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        for line in lines:
            line = line.strip()
            match = re.search(r't\.me/([^/]+)/(\d+)', line)

            if match:
                channel_username = match.group(1)
                message_id = int(match.group(2))

                try:
                    entity = await client.get_entity(channel_username)
                    await client.delete_messages(entity, message_id)
                    logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ {channel_username}")
                except errors.MessageIdInvalidError:
                    logging.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                except errors.ChatAdminRequiredError:
                    logging.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {channel_username}.")
                except errors.FloodWaitError as e:
                    logging.error(f"‚è≥ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(e.seconds)
                except errors.UserIsBlockedError:
                    logging.error("üö´ Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞.")
                    break
                except errors.PhoneNumberBannedError:
                    logging.critical("üö® –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ Telegram!")
                    break
                except Exception as e:
                    logging.exception(f"‚ùó –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {message_id}: {e}")
            else:
                logging.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏: {line}")

    finally:
        await client.disconnect()
        logging.info("üîí –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram")

if __name__ == "__main__":
    asyncio.run(delete_messages())